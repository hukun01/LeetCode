Binary search:
1. Define search space
2. Define predicate p and target x so that p(a) = false, and p(b) = true, for a < x <= b

Always test your code on empty, one-element, and two-element sets, to ensure that it doesn't stuck by round-down.

There can be 2 types of search spaces:
1. Index space - where values[index] grow with the index monotonically
2. Value space - where the values[index] doesn't grow monotonically, so we need to find the target value by verifying each candidate, and discard half of the value space each time.


Why are you sure that the final l will be the correct answer?
    Whenever we find a smaller good value, we set it as the inclusive upper bound; 
    whenever we find a bad value thatâ€™s too small, we set it as the exclusive lower bound. 
    Thus, we will eventually tighten up the search space until it contains only one good value which will be the smallest one.